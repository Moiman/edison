Edison: A Library of Efficient Data Structures
(Haskell Version 1.2rc1)
February 20, 2006


About Edison
-----------------------

Edison is a library of purely function data structures for Haskell
originally written by Chris Okasaki.  Conceptually, it consists of two
things:
  1) A set of type classes defining data the following data structure
     abstractions: "sequences", "collections" and "associative collections"
  2) Multiple concrete implementations of each of the abstractions.

In theory, either component may be used independently of the other.

This release is an update to (hopefully) make Edison easier to use,
mostly by updating Edison to use the most current Haskell tools.
The following major changes have been made since version 1.1, which
was released in 1999.

  * Typeclasses updated to use fundeps (by Andrew Bromage)
  * Implementation of ternary search tries (by Andrew Bromage)
  * Modules renamed to use the hierarchical module extension
  * Documentation haddockized
  * Source moved to a darcs repository
  * Build system cabalized
  * Unit tests integrated into a single driver program which exercises
    all the concrete implementations shipped with Edison


Hopefully, these changes will make Edison more accessible than it has
been previously.


License
-----------------------

Edison is released under a BSD3 style license.  See the COPYRIGHT
file for details.



Building Edison
-----------------------

Edison uses a Cabal build system.  The following commands
assume you have a Haskell interpreter in your system 
path named 'runhaskell'.  All commands are run from
this directory.

To install for the whole system:

runhaskell Setup.hs configure
runhaskell Setup.hs build
runhaskell Setup.hs install

To install for a single user:

runhaskell Setup.hs configure --prefix=/home/<username>
runhaskell Setup.hs build
runhaskell Setup.hs install --user

To build the API docs:

runhaskell Setup.hs haddock



Notes on portability
----------------------


Short version:

Edison is expected to work correctly on recent GHC and Hugs (with
extensions enabled).  Other Haskell implementations may also work, but
have not been tested.


Longer version:

Edison uses a number of extensions beyond Haskell 98, the current
official Haskell standard.  These include:

  * Multi-parameter typeclasses
  * Functional dependencies
  * Undecidable instances

In all cases, these extensions are used to allow the typeclass
abstractions to be expressed.  These extensions are fairly popular
and seem likely to make it in some form into a Haskell standard
(hopefully in the not too distant future).

Currently, Edison builds and runs correctly under GHC and Hugs.
More specificly, most development and testing has been done with
GHC 6.4.1, and the test suite builds and runs to completion with no errors.
With Hugs (March 2005 release) and the '-98' option, the test suite will
load typecheck, and begin executing, but fails during execution due to
high resource usage. I expect that normal usage under Hugs will not
experience problems.

As the extensions used are not recent developments, I also expect that less
recent versions of GHC and Hugs will also work.  The up-and-coming Haskell
implementations (notably YHC and JHC) may also work correctly with Edison,
but this has not been tested.  I do not believe that NHC or HBC have
implemented MPTC or fundeps, and thus I do not expect them to work correctly
with Edison.
